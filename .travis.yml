# 언어 선택
language: generic

# 관리자 권한 갖기
sudo: required

# 도커 환경 구성으로 만든다고 travis ci에게 명시
services:
  - docker

# 스크립트를 실행할 수 있는 환경 구성
before_install:
  - docker build -t minhyup/react-test-app -f ./frontend/Dockerfile.dev ./frontend

# 실행할 스크립트 (테스트 실행)
script:
  - docker run -e CI=true minhyup/react-test-app npm run test

# 테스트 성공 후 운영버전으로 이미지 빌드
after_success:
  - docker build -t minhyupp/docker-frontend ./frontend
  - docker build -t minhyupp/docker-backend ./backend
  - docker build -t minhyupp/docker-nginx ./nginx
  # 빌드된 이미지를 도커허브에 보내주기(도커 허브 로그인) TRAVIS CI에서 환경변수를 만들어줘야 이 스크립트에서 해당 변수를 읽을때 자동으로 해당하는 값으로 치환해준다.
  - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_ID" --password-stdin
  # 빌드된 이미지들을 도커허브에 push
  - docker push minhyupp/docker-frontend
  - docker push minhyupp/docker-backend
  - docker push minhyupp/docker-nginx

# 배포관련(github -> travis ci(aws에서 제공해주는 secret key를 travis yml 파일에 적어줘야 함) -> AWS)
deploy:
  # 외부 서비스 표시 (s3, elaticbeanstalk, firebase 등)
  provider: elasticbeanstalk
  # 현재 사용하고 있는 AWS의 서비스가 위치하고 있는 물리적 장소(ex: us-east-1)
  region: "ap-northeast-2"
  # 생성된 어플리케이션의 이름
  app: "docker-fullstack-app"
  env: "DockerFullstackApp-env"
  # EB를 위한 S3 버킷 이름
  bucket_name: elasticbeanstalk-ap-northeast-2-813906163992
  # 어플리케이션의 이름과 동일
  bucket_path: "docker-fullstack-app"
  on:
    # 어떤 브랜치에 push할 때 AWS에 배포할 것인지 판단을 위한 브랜치명
    branch: main

  # travis ci에 AWS Elastic beanstalk에 부여한 IAM 사용자의 액세스키와 비밀키 정보를 등록한 값을 가져온다.
  access_key_id: $AWS_ACCESS_KEY
  secret_access_key: $AWS_SECRET_ACCESS_KEY